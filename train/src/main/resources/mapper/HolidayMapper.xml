<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lemon.train.mapper.HolidayMapper">
  <resultMap id="BaseResultMap" type="com.lemon.train.entity.Holiday">
    <id column="vacation" jdbcType="DATE" property="vacation" />
    <result column="status" jdbcType="INTEGER" property="status" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    vacation, status
  </sql>
  <select id="selectByExample" parameterType="com.lemon.train.entity.HolidayExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from holiday
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.util.Date" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from holiday
    where vacation = #{vacation,jdbcType=DATE}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.util.Date">
    delete from holiday
    where vacation = #{vacation,jdbcType=DATE}
  </delete>
  <delete id="deleteByExample" parameterType="com.lemon.train.entity.HolidayExample">
    delete from holiday
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.lemon.train.entity.Holiday">
    insert into holiday (vacation, status)
    values (#{vacation,jdbcType=DATE}, #{status,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.lemon.train.entity.Holiday">
    insert into holiday
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="vacation != null">
        vacation,
      </if>
      <if test="status != null">
        status,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="vacation != null">
        #{vacation,jdbcType=DATE},
      </if>
      <if test="status != null">
        #{status,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.lemon.train.entity.HolidayExample" resultType="java.lang.Long">
    select count(*) from holiday
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update holiday
    <set>
      <if test="record.vacation != null">
        vacation = #{record.vacation,jdbcType=DATE},
      </if>
      <if test="record.status != null">
        status = #{record.status,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update holiday
    set vacation = #{record.vacation,jdbcType=DATE},
      status = #{record.status,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.lemon.train.entity.Holiday">
    update holiday
    <set>
      <if test="status != null">
        status = #{status,jdbcType=INTEGER},
      </if>
    </set>
    where vacation = #{vacation,jdbcType=DATE}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.lemon.train.entity.Holiday">
    update holiday
    set status = #{status,jdbcType=INTEGER}
    where vacation = #{vacation,jdbcType=DATE}
  </update>


  <update id="updateDiscountById" parameterType="com.lemon.train.entity.Pricemanage">
    update pricemanage
    set returnprice = #{returnprice,jdbcType=DOUBLE},
      discount1 = #{discount1,jdbcType=DOUBLE},
      discount2 = #{discount2,jdbcType=DOUBLE},
      discount3 = #{discount3,jdbcType=DOUBLE}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <select id="getSpecialDiscount" statementType="CALLABLE" parameterType="java.util.Map" resultType="double">
    {call returndiscount(
	        #{status,mode=IN,jdbcType=INTEGER},
	        #{discount,mode=OUT,jdbcType=DOUBLE}
	    )}
  </select>



  <select id="getToalPrice" statementType="CALLABLE" parameterType="java.util.Map" >
    {call totalprice(
	        #{traindates,mode=IN,jdbcType=DATE},
	        #{totalprice,mode=OUT,jdbcType=DECIMAL}
	    )}
  </select>
</mapper>